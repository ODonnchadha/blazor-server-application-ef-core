@page "/employees"
@using Microsoft.EntityFrameworkCore
@using System.Linq
@using Microsoft.AspNetCore.Components.QuickGrid
@using WiredBrainCoffee.EmployeeManager.Data
@implements IAsyncDisposable
@inject IDbContextFactory<EmployeeManagerDbContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>
<h1>Index</h1>
<p>
    <a href="employees/create">Create New</a>
</p>

<QuickGrid Class="table" Items="employees" Pagination="paginationState">
    <PropertyColumn Property="employee => employee.FirstName" Sortable="true" Title="First Name">
        <ColumnOptions>
            <input type="search" class="form-control" @bind="firstNameFilter" @bind:event="oninput" autofocus />
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="employee => employee.LastName" Sortable="true" Title="Last Name" />
    <PropertyColumn Property="employee => employee.IsDeveloper" Title="Is Developer" />
    <PropertyColumn Property="employee => employee.Department!.Name" Title="Department" />

    <TemplateColumn Context="employee">
        <a href="@($"employees/edit?id={employee.Id}")">Edit</a> |
        <a href="@($"employees/details?id={employee.Id}")">Details</a> |
        <a href="@($"employees/delete?id={employee.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="paginationState" />

@code {
    private EmployeeManagerDbContext context = default!;
    protected override void OnInitialized() => context = DbFactory.CreateDbContext();
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
    PaginationState paginationState = new PaginationState 
    { 
        ItemsPerPage = 10 
    };

    string firstNameFilter = "";
    IQueryable<Employee> employees => context.Employee.Include(
        e => e.Department).Where(
            e => e.FirstName!.Contains(firstNameFilter));
}